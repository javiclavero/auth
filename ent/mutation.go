// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/javiclavero/go-auth-service/ent/predicate"
	"github.com/javiclavero/go-auth-service/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	use_id                  *uint64
	adduse_id               *int64
	use_type                *int64
	adduse_type             *int64
	use_username            *string
	use_pwd                 *string
	use_email               *string
	use_reset_token         *string
	use_reset_token_expiry  *time.Time
	use_access_token        *string
	use_access_token_expiry *time.Time
	use_created_at          *time.Time
	use_updated_at          *time.Time
	use_deleted_at          *time.Time
	clearedFields           map[string]struct{}
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUseID sets the "use_id" field.
func (m *UserMutation) SetUseID(u uint64) {
	m.use_id = &u
	m.adduse_id = nil
}

// UseID returns the value of the "use_id" field in the mutation.
func (m *UserMutation) UseID() (r uint64, exists bool) {
	v := m.use_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUseID returns the old "use_id" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseID: %w", err)
	}
	return oldValue.UseID, nil
}

// AddUseID adds u to the "use_id" field.
func (m *UserMutation) AddUseID(u int64) {
	if m.adduse_id != nil {
		*m.adduse_id += u
	} else {
		m.adduse_id = &u
	}
}

// AddedUseID returns the value that was added to the "use_id" field in this mutation.
func (m *UserMutation) AddedUseID() (r int64, exists bool) {
	v := m.adduse_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetUseID resets all changes to the "use_id" field.
func (m *UserMutation) ResetUseID() {
	m.use_id = nil
	m.adduse_id = nil
}

// SetUseType sets the "use_type" field.
func (m *UserMutation) SetUseType(i int64) {
	m.use_type = &i
	m.adduse_type = nil
}

// UseType returns the value of the "use_type" field in the mutation.
func (m *UserMutation) UseType() (r int64, exists bool) {
	v := m.use_type
	if v == nil {
		return
	}
	return *v, true
}

// OldUseType returns the old "use_type" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseType(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseType: %w", err)
	}
	return oldValue.UseType, nil
}

// AddUseType adds i to the "use_type" field.
func (m *UserMutation) AddUseType(i int64) {
	if m.adduse_type != nil {
		*m.adduse_type += i
	} else {
		m.adduse_type = &i
	}
}

// AddedUseType returns the value that was added to the "use_type" field in this mutation.
func (m *UserMutation) AddedUseType() (r int64, exists bool) {
	v := m.adduse_type
	if v == nil {
		return
	}
	return *v, true
}

// ResetUseType resets all changes to the "use_type" field.
func (m *UserMutation) ResetUseType() {
	m.use_type = nil
	m.adduse_type = nil
}

// SetUseUsername sets the "use_username" field.
func (m *UserMutation) SetUseUsername(s string) {
	m.use_username = &s
}

// UseUsername returns the value of the "use_username" field in the mutation.
func (m *UserMutation) UseUsername() (r string, exists bool) {
	v := m.use_username
	if v == nil {
		return
	}
	return *v, true
}

// OldUseUsername returns the old "use_username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseUsername: %w", err)
	}
	return oldValue.UseUsername, nil
}

// ResetUseUsername resets all changes to the "use_username" field.
func (m *UserMutation) ResetUseUsername() {
	m.use_username = nil
}

// SetUsePwd sets the "use_pwd" field.
func (m *UserMutation) SetUsePwd(s string) {
	m.use_pwd = &s
}

// UsePwd returns the value of the "use_pwd" field in the mutation.
func (m *UserMutation) UsePwd() (r string, exists bool) {
	v := m.use_pwd
	if v == nil {
		return
	}
	return *v, true
}

// OldUsePwd returns the old "use_pwd" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsePwd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsePwd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsePwd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsePwd: %w", err)
	}
	return oldValue.UsePwd, nil
}

// ResetUsePwd resets all changes to the "use_pwd" field.
func (m *UserMutation) ResetUsePwd() {
	m.use_pwd = nil
}

// SetUseEmail sets the "use_email" field.
func (m *UserMutation) SetUseEmail(s string) {
	m.use_email = &s
}

// UseEmail returns the value of the "use_email" field in the mutation.
func (m *UserMutation) UseEmail() (r string, exists bool) {
	v := m.use_email
	if v == nil {
		return
	}
	return *v, true
}

// OldUseEmail returns the old "use_email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseEmail: %w", err)
	}
	return oldValue.UseEmail, nil
}

// ResetUseEmail resets all changes to the "use_email" field.
func (m *UserMutation) ResetUseEmail() {
	m.use_email = nil
}

// SetUseResetToken sets the "use_reset_token" field.
func (m *UserMutation) SetUseResetToken(s string) {
	m.use_reset_token = &s
}

// UseResetToken returns the value of the "use_reset_token" field in the mutation.
func (m *UserMutation) UseResetToken() (r string, exists bool) {
	v := m.use_reset_token
	if v == nil {
		return
	}
	return *v, true
}

// OldUseResetToken returns the old "use_reset_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseResetToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseResetToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseResetToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseResetToken: %w", err)
	}
	return oldValue.UseResetToken, nil
}

// ClearUseResetToken clears the value of the "use_reset_token" field.
func (m *UserMutation) ClearUseResetToken() {
	m.use_reset_token = nil
	m.clearedFields[user.FieldUseResetToken] = struct{}{}
}

// UseResetTokenCleared returns if the "use_reset_token" field was cleared in this mutation.
func (m *UserMutation) UseResetTokenCleared() bool {
	_, ok := m.clearedFields[user.FieldUseResetToken]
	return ok
}

// ResetUseResetToken resets all changes to the "use_reset_token" field.
func (m *UserMutation) ResetUseResetToken() {
	m.use_reset_token = nil
	delete(m.clearedFields, user.FieldUseResetToken)
}

// SetUseResetTokenExpiry sets the "use_reset_token_expiry" field.
func (m *UserMutation) SetUseResetTokenExpiry(t time.Time) {
	m.use_reset_token_expiry = &t
}

// UseResetTokenExpiry returns the value of the "use_reset_token_expiry" field in the mutation.
func (m *UserMutation) UseResetTokenExpiry() (r time.Time, exists bool) {
	v := m.use_reset_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldUseResetTokenExpiry returns the old "use_reset_token_expiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseResetTokenExpiry(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseResetTokenExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseResetTokenExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseResetTokenExpiry: %w", err)
	}
	return oldValue.UseResetTokenExpiry, nil
}

// ClearUseResetTokenExpiry clears the value of the "use_reset_token_expiry" field.
func (m *UserMutation) ClearUseResetTokenExpiry() {
	m.use_reset_token_expiry = nil
	m.clearedFields[user.FieldUseResetTokenExpiry] = struct{}{}
}

// UseResetTokenExpiryCleared returns if the "use_reset_token_expiry" field was cleared in this mutation.
func (m *UserMutation) UseResetTokenExpiryCleared() bool {
	_, ok := m.clearedFields[user.FieldUseResetTokenExpiry]
	return ok
}

// ResetUseResetTokenExpiry resets all changes to the "use_reset_token_expiry" field.
func (m *UserMutation) ResetUseResetTokenExpiry() {
	m.use_reset_token_expiry = nil
	delete(m.clearedFields, user.FieldUseResetTokenExpiry)
}

// SetUseAccessToken sets the "use_access_token" field.
func (m *UserMutation) SetUseAccessToken(s string) {
	m.use_access_token = &s
}

// UseAccessToken returns the value of the "use_access_token" field in the mutation.
func (m *UserMutation) UseAccessToken() (r string, exists bool) {
	v := m.use_access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldUseAccessToken returns the old "use_access_token" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseAccessToken(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseAccessToken: %w", err)
	}
	return oldValue.UseAccessToken, nil
}

// ClearUseAccessToken clears the value of the "use_access_token" field.
func (m *UserMutation) ClearUseAccessToken() {
	m.use_access_token = nil
	m.clearedFields[user.FieldUseAccessToken] = struct{}{}
}

// UseAccessTokenCleared returns if the "use_access_token" field was cleared in this mutation.
func (m *UserMutation) UseAccessTokenCleared() bool {
	_, ok := m.clearedFields[user.FieldUseAccessToken]
	return ok
}

// ResetUseAccessToken resets all changes to the "use_access_token" field.
func (m *UserMutation) ResetUseAccessToken() {
	m.use_access_token = nil
	delete(m.clearedFields, user.FieldUseAccessToken)
}

// SetUseAccessTokenExpiry sets the "use_access_token_expiry" field.
func (m *UserMutation) SetUseAccessTokenExpiry(t time.Time) {
	m.use_access_token_expiry = &t
}

// UseAccessTokenExpiry returns the value of the "use_access_token_expiry" field in the mutation.
func (m *UserMutation) UseAccessTokenExpiry() (r time.Time, exists bool) {
	v := m.use_access_token_expiry
	if v == nil {
		return
	}
	return *v, true
}

// OldUseAccessTokenExpiry returns the old "use_access_token_expiry" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseAccessTokenExpiry(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseAccessTokenExpiry is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseAccessTokenExpiry requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseAccessTokenExpiry: %w", err)
	}
	return oldValue.UseAccessTokenExpiry, nil
}

// ClearUseAccessTokenExpiry clears the value of the "use_access_token_expiry" field.
func (m *UserMutation) ClearUseAccessTokenExpiry() {
	m.use_access_token_expiry = nil
	m.clearedFields[user.FieldUseAccessTokenExpiry] = struct{}{}
}

// UseAccessTokenExpiryCleared returns if the "use_access_token_expiry" field was cleared in this mutation.
func (m *UserMutation) UseAccessTokenExpiryCleared() bool {
	_, ok := m.clearedFields[user.FieldUseAccessTokenExpiry]
	return ok
}

// ResetUseAccessTokenExpiry resets all changes to the "use_access_token_expiry" field.
func (m *UserMutation) ResetUseAccessTokenExpiry() {
	m.use_access_token_expiry = nil
	delete(m.clearedFields, user.FieldUseAccessTokenExpiry)
}

// SetUseCreatedAt sets the "use_created_at" field.
func (m *UserMutation) SetUseCreatedAt(t time.Time) {
	m.use_created_at = &t
}

// UseCreatedAt returns the value of the "use_created_at" field in the mutation.
func (m *UserMutation) UseCreatedAt() (r time.Time, exists bool) {
	v := m.use_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUseCreatedAt returns the old "use_created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseCreatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseCreatedAt: %w", err)
	}
	return oldValue.UseCreatedAt, nil
}

// ClearUseCreatedAt clears the value of the "use_created_at" field.
func (m *UserMutation) ClearUseCreatedAt() {
	m.use_created_at = nil
	m.clearedFields[user.FieldUseCreatedAt] = struct{}{}
}

// UseCreatedAtCleared returns if the "use_created_at" field was cleared in this mutation.
func (m *UserMutation) UseCreatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUseCreatedAt]
	return ok
}

// ResetUseCreatedAt resets all changes to the "use_created_at" field.
func (m *UserMutation) ResetUseCreatedAt() {
	m.use_created_at = nil
	delete(m.clearedFields, user.FieldUseCreatedAt)
}

// SetUseUpdatedAt sets the "use_updated_at" field.
func (m *UserMutation) SetUseUpdatedAt(t time.Time) {
	m.use_updated_at = &t
}

// UseUpdatedAt returns the value of the "use_updated_at" field in the mutation.
func (m *UserMutation) UseUpdatedAt() (r time.Time, exists bool) {
	v := m.use_updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUseUpdatedAt returns the old "use_updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseUpdatedAt: %w", err)
	}
	return oldValue.UseUpdatedAt, nil
}

// ClearUseUpdatedAt clears the value of the "use_updated_at" field.
func (m *UserMutation) ClearUseUpdatedAt() {
	m.use_updated_at = nil
	m.clearedFields[user.FieldUseUpdatedAt] = struct{}{}
}

// UseUpdatedAtCleared returns if the "use_updated_at" field was cleared in this mutation.
func (m *UserMutation) UseUpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUseUpdatedAt]
	return ok
}

// ResetUseUpdatedAt resets all changes to the "use_updated_at" field.
func (m *UserMutation) ResetUseUpdatedAt() {
	m.use_updated_at = nil
	delete(m.clearedFields, user.FieldUseUpdatedAt)
}

// SetUseDeletedAt sets the "use_deleted_at" field.
func (m *UserMutation) SetUseDeletedAt(t time.Time) {
	m.use_deleted_at = &t
}

// UseDeletedAt returns the value of the "use_deleted_at" field in the mutation.
func (m *UserMutation) UseDeletedAt() (r time.Time, exists bool) {
	v := m.use_deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUseDeletedAt returns the old "use_deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUseDeletedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUseDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUseDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUseDeletedAt: %w", err)
	}
	return oldValue.UseDeletedAt, nil
}

// ClearUseDeletedAt clears the value of the "use_deleted_at" field.
func (m *UserMutation) ClearUseDeletedAt() {
	m.use_deleted_at = nil
	m.clearedFields[user.FieldUseDeletedAt] = struct{}{}
}

// UseDeletedAtCleared returns if the "use_deleted_at" field was cleared in this mutation.
func (m *UserMutation) UseDeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldUseDeletedAt]
	return ok
}

// ResetUseDeletedAt resets all changes to the "use_deleted_at" field.
func (m *UserMutation) ResetUseDeletedAt() {
	m.use_deleted_at = nil
	delete(m.clearedFields, user.FieldUseDeletedAt)
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.use_id != nil {
		fields = append(fields, user.FieldUseID)
	}
	if m.use_type != nil {
		fields = append(fields, user.FieldUseType)
	}
	if m.use_username != nil {
		fields = append(fields, user.FieldUseUsername)
	}
	if m.use_pwd != nil {
		fields = append(fields, user.FieldUsePwd)
	}
	if m.use_email != nil {
		fields = append(fields, user.FieldUseEmail)
	}
	if m.use_reset_token != nil {
		fields = append(fields, user.FieldUseResetToken)
	}
	if m.use_reset_token_expiry != nil {
		fields = append(fields, user.FieldUseResetTokenExpiry)
	}
	if m.use_access_token != nil {
		fields = append(fields, user.FieldUseAccessToken)
	}
	if m.use_access_token_expiry != nil {
		fields = append(fields, user.FieldUseAccessTokenExpiry)
	}
	if m.use_created_at != nil {
		fields = append(fields, user.FieldUseCreatedAt)
	}
	if m.use_updated_at != nil {
		fields = append(fields, user.FieldUseUpdatedAt)
	}
	if m.use_deleted_at != nil {
		fields = append(fields, user.FieldUseDeletedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUseID:
		return m.UseID()
	case user.FieldUseType:
		return m.UseType()
	case user.FieldUseUsername:
		return m.UseUsername()
	case user.FieldUsePwd:
		return m.UsePwd()
	case user.FieldUseEmail:
		return m.UseEmail()
	case user.FieldUseResetToken:
		return m.UseResetToken()
	case user.FieldUseResetTokenExpiry:
		return m.UseResetTokenExpiry()
	case user.FieldUseAccessToken:
		return m.UseAccessToken()
	case user.FieldUseAccessTokenExpiry:
		return m.UseAccessTokenExpiry()
	case user.FieldUseCreatedAt:
		return m.UseCreatedAt()
	case user.FieldUseUpdatedAt:
		return m.UseUpdatedAt()
	case user.FieldUseDeletedAt:
		return m.UseDeletedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUseID:
		return m.OldUseID(ctx)
	case user.FieldUseType:
		return m.OldUseType(ctx)
	case user.FieldUseUsername:
		return m.OldUseUsername(ctx)
	case user.FieldUsePwd:
		return m.OldUsePwd(ctx)
	case user.FieldUseEmail:
		return m.OldUseEmail(ctx)
	case user.FieldUseResetToken:
		return m.OldUseResetToken(ctx)
	case user.FieldUseResetTokenExpiry:
		return m.OldUseResetTokenExpiry(ctx)
	case user.FieldUseAccessToken:
		return m.OldUseAccessToken(ctx)
	case user.FieldUseAccessTokenExpiry:
		return m.OldUseAccessTokenExpiry(ctx)
	case user.FieldUseCreatedAt:
		return m.OldUseCreatedAt(ctx)
	case user.FieldUseUpdatedAt:
		return m.OldUseUpdatedAt(ctx)
	case user.FieldUseDeletedAt:
		return m.OldUseDeletedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUseID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseID(v)
		return nil
	case user.FieldUseType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseType(v)
		return nil
	case user.FieldUseUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseUsername(v)
		return nil
	case user.FieldUsePwd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsePwd(v)
		return nil
	case user.FieldUseEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseEmail(v)
		return nil
	case user.FieldUseResetToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseResetToken(v)
		return nil
	case user.FieldUseResetTokenExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseResetTokenExpiry(v)
		return nil
	case user.FieldUseAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseAccessToken(v)
		return nil
	case user.FieldUseAccessTokenExpiry:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseAccessTokenExpiry(v)
		return nil
	case user.FieldUseCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseCreatedAt(v)
		return nil
	case user.FieldUseUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseUpdatedAt(v)
		return nil
	case user.FieldUseDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUseDeletedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.adduse_id != nil {
		fields = append(fields, user.FieldUseID)
	}
	if m.adduse_type != nil {
		fields = append(fields, user.FieldUseType)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUseID:
		return m.AddedUseID()
	case user.FieldUseType:
		return m.AddedUseType()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldUseID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUseID(v)
		return nil
	case user.FieldUseType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddUseType(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldUseResetToken) {
		fields = append(fields, user.FieldUseResetToken)
	}
	if m.FieldCleared(user.FieldUseResetTokenExpiry) {
		fields = append(fields, user.FieldUseResetTokenExpiry)
	}
	if m.FieldCleared(user.FieldUseAccessToken) {
		fields = append(fields, user.FieldUseAccessToken)
	}
	if m.FieldCleared(user.FieldUseAccessTokenExpiry) {
		fields = append(fields, user.FieldUseAccessTokenExpiry)
	}
	if m.FieldCleared(user.FieldUseCreatedAt) {
		fields = append(fields, user.FieldUseCreatedAt)
	}
	if m.FieldCleared(user.FieldUseUpdatedAt) {
		fields = append(fields, user.FieldUseUpdatedAt)
	}
	if m.FieldCleared(user.FieldUseDeletedAt) {
		fields = append(fields, user.FieldUseDeletedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldUseResetToken:
		m.ClearUseResetToken()
		return nil
	case user.FieldUseResetTokenExpiry:
		m.ClearUseResetTokenExpiry()
		return nil
	case user.FieldUseAccessToken:
		m.ClearUseAccessToken()
		return nil
	case user.FieldUseAccessTokenExpiry:
		m.ClearUseAccessTokenExpiry()
		return nil
	case user.FieldUseCreatedAt:
		m.ClearUseCreatedAt()
		return nil
	case user.FieldUseUpdatedAt:
		m.ClearUseUpdatedAt()
		return nil
	case user.FieldUseDeletedAt:
		m.ClearUseDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUseID:
		m.ResetUseID()
		return nil
	case user.FieldUseType:
		m.ResetUseType()
		return nil
	case user.FieldUseUsername:
		m.ResetUseUsername()
		return nil
	case user.FieldUsePwd:
		m.ResetUsePwd()
		return nil
	case user.FieldUseEmail:
		m.ResetUseEmail()
		return nil
	case user.FieldUseResetToken:
		m.ResetUseResetToken()
		return nil
	case user.FieldUseResetTokenExpiry:
		m.ResetUseResetTokenExpiry()
		return nil
	case user.FieldUseAccessToken:
		m.ResetUseAccessToken()
		return nil
	case user.FieldUseAccessTokenExpiry:
		m.ResetUseAccessTokenExpiry()
		return nil
	case user.FieldUseCreatedAt:
		m.ResetUseCreatedAt()
		return nil
	case user.FieldUseUpdatedAt:
		m.ResetUseUpdatedAt()
		return nil
	case user.FieldUseDeletedAt:
		m.ResetUseDeletedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
