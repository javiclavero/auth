// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/javiclavero/go-auth-service/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// UseID applies equality check predicate on the "use_id" field. It's identical to UseIDEQ.
func UseID(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseID, v))
}

// UseType applies equality check predicate on the "use_type" field. It's identical to UseTypeEQ.
func UseType(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseType, v))
}

// UseUsername applies equality check predicate on the "use_username" field. It's identical to UseUsernameEQ.
func UseUsername(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseUsername, v))
}

// UsePwd applies equality check predicate on the "use_pwd" field. It's identical to UsePwdEQ.
func UsePwd(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsePwd, v))
}

// UseEmail applies equality check predicate on the "use_email" field. It's identical to UseEmailEQ.
func UseEmail(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseEmail, v))
}

// UseResetToken applies equality check predicate on the "use_reset_token" field. It's identical to UseResetTokenEQ.
func UseResetToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseResetToken, v))
}

// UseResetTokenExpiry applies equality check predicate on the "use_reset_token_expiry" field. It's identical to UseResetTokenExpiryEQ.
func UseResetTokenExpiry(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseResetTokenExpiry, v))
}

// UseAccessToken applies equality check predicate on the "use_access_token" field. It's identical to UseAccessTokenEQ.
func UseAccessToken(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseAccessToken, v))
}

// UseAccessTokenExpiry applies equality check predicate on the "use_access_token_expiry" field. It's identical to UseAccessTokenExpiryEQ.
func UseAccessTokenExpiry(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseAccessTokenExpiry, v))
}

// UseCreatedAt applies equality check predicate on the "use_created_at" field. It's identical to UseCreatedAtEQ.
func UseCreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseCreatedAt, v))
}

// UseUpdatedAt applies equality check predicate on the "use_updated_at" field. It's identical to UseUpdatedAtEQ.
func UseUpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseUpdatedAt, v))
}

// UseDeletedAt applies equality check predicate on the "use_deleted_at" field. It's identical to UseDeletedAtEQ.
func UseDeletedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseDeletedAt, v))
}

// UseIDEQ applies the EQ predicate on the "use_id" field.
func UseIDEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseID, v))
}

// UseIDNEQ applies the NEQ predicate on the "use_id" field.
func UseIDNEQ(v uint64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseID, v))
}

// UseIDIn applies the In predicate on the "use_id" field.
func UseIDIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseID, vs...))
}

// UseIDNotIn applies the NotIn predicate on the "use_id" field.
func UseIDNotIn(vs ...uint64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseID, vs...))
}

// UseIDGT applies the GT predicate on the "use_id" field.
func UseIDGT(v uint64) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseID, v))
}

// UseIDGTE applies the GTE predicate on the "use_id" field.
func UseIDGTE(v uint64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseID, v))
}

// UseIDLT applies the LT predicate on the "use_id" field.
func UseIDLT(v uint64) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseID, v))
}

// UseIDLTE applies the LTE predicate on the "use_id" field.
func UseIDLTE(v uint64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseID, v))
}

// UseTypeEQ applies the EQ predicate on the "use_type" field.
func UseTypeEQ(v int64) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseType, v))
}

// UseTypeNEQ applies the NEQ predicate on the "use_type" field.
func UseTypeNEQ(v int64) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseType, v))
}

// UseTypeIn applies the In predicate on the "use_type" field.
func UseTypeIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseType, vs...))
}

// UseTypeNotIn applies the NotIn predicate on the "use_type" field.
func UseTypeNotIn(vs ...int64) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseType, vs...))
}

// UseTypeGT applies the GT predicate on the "use_type" field.
func UseTypeGT(v int64) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseType, v))
}

// UseTypeGTE applies the GTE predicate on the "use_type" field.
func UseTypeGTE(v int64) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseType, v))
}

// UseTypeLT applies the LT predicate on the "use_type" field.
func UseTypeLT(v int64) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseType, v))
}

// UseTypeLTE applies the LTE predicate on the "use_type" field.
func UseTypeLTE(v int64) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseType, v))
}

// UseUsernameEQ applies the EQ predicate on the "use_username" field.
func UseUsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseUsername, v))
}

// UseUsernameNEQ applies the NEQ predicate on the "use_username" field.
func UseUsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseUsername, v))
}

// UseUsernameIn applies the In predicate on the "use_username" field.
func UseUsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseUsername, vs...))
}

// UseUsernameNotIn applies the NotIn predicate on the "use_username" field.
func UseUsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseUsername, vs...))
}

// UseUsernameGT applies the GT predicate on the "use_username" field.
func UseUsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseUsername, v))
}

// UseUsernameGTE applies the GTE predicate on the "use_username" field.
func UseUsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseUsername, v))
}

// UseUsernameLT applies the LT predicate on the "use_username" field.
func UseUsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseUsername, v))
}

// UseUsernameLTE applies the LTE predicate on the "use_username" field.
func UseUsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseUsername, v))
}

// UseUsernameContains applies the Contains predicate on the "use_username" field.
func UseUsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUseUsername, v))
}

// UseUsernameHasPrefix applies the HasPrefix predicate on the "use_username" field.
func UseUsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUseUsername, v))
}

// UseUsernameHasSuffix applies the HasSuffix predicate on the "use_username" field.
func UseUsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUseUsername, v))
}

// UseUsernameEqualFold applies the EqualFold predicate on the "use_username" field.
func UseUsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUseUsername, v))
}

// UseUsernameContainsFold applies the ContainsFold predicate on the "use_username" field.
func UseUsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUseUsername, v))
}

// UsePwdEQ applies the EQ predicate on the "use_pwd" field.
func UsePwdEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsePwd, v))
}

// UsePwdNEQ applies the NEQ predicate on the "use_pwd" field.
func UsePwdNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsePwd, v))
}

// UsePwdIn applies the In predicate on the "use_pwd" field.
func UsePwdIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsePwd, vs...))
}

// UsePwdNotIn applies the NotIn predicate on the "use_pwd" field.
func UsePwdNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsePwd, vs...))
}

// UsePwdGT applies the GT predicate on the "use_pwd" field.
func UsePwdGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsePwd, v))
}

// UsePwdGTE applies the GTE predicate on the "use_pwd" field.
func UsePwdGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsePwd, v))
}

// UsePwdLT applies the LT predicate on the "use_pwd" field.
func UsePwdLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsePwd, v))
}

// UsePwdLTE applies the LTE predicate on the "use_pwd" field.
func UsePwdLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsePwd, v))
}

// UsePwdContains applies the Contains predicate on the "use_pwd" field.
func UsePwdContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsePwd, v))
}

// UsePwdHasPrefix applies the HasPrefix predicate on the "use_pwd" field.
func UsePwdHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsePwd, v))
}

// UsePwdHasSuffix applies the HasSuffix predicate on the "use_pwd" field.
func UsePwdHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsePwd, v))
}

// UsePwdEqualFold applies the EqualFold predicate on the "use_pwd" field.
func UsePwdEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsePwd, v))
}

// UsePwdContainsFold applies the ContainsFold predicate on the "use_pwd" field.
func UsePwdContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsePwd, v))
}

// UseEmailEQ applies the EQ predicate on the "use_email" field.
func UseEmailEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseEmail, v))
}

// UseEmailNEQ applies the NEQ predicate on the "use_email" field.
func UseEmailNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseEmail, v))
}

// UseEmailIn applies the In predicate on the "use_email" field.
func UseEmailIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseEmail, vs...))
}

// UseEmailNotIn applies the NotIn predicate on the "use_email" field.
func UseEmailNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseEmail, vs...))
}

// UseEmailGT applies the GT predicate on the "use_email" field.
func UseEmailGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseEmail, v))
}

// UseEmailGTE applies the GTE predicate on the "use_email" field.
func UseEmailGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseEmail, v))
}

// UseEmailLT applies the LT predicate on the "use_email" field.
func UseEmailLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseEmail, v))
}

// UseEmailLTE applies the LTE predicate on the "use_email" field.
func UseEmailLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseEmail, v))
}

// UseEmailContains applies the Contains predicate on the "use_email" field.
func UseEmailContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUseEmail, v))
}

// UseEmailHasPrefix applies the HasPrefix predicate on the "use_email" field.
func UseEmailHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUseEmail, v))
}

// UseEmailHasSuffix applies the HasSuffix predicate on the "use_email" field.
func UseEmailHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUseEmail, v))
}

// UseEmailEqualFold applies the EqualFold predicate on the "use_email" field.
func UseEmailEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUseEmail, v))
}

// UseEmailContainsFold applies the ContainsFold predicate on the "use_email" field.
func UseEmailContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUseEmail, v))
}

// UseResetTokenEQ applies the EQ predicate on the "use_reset_token" field.
func UseResetTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseResetToken, v))
}

// UseResetTokenNEQ applies the NEQ predicate on the "use_reset_token" field.
func UseResetTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseResetToken, v))
}

// UseResetTokenIn applies the In predicate on the "use_reset_token" field.
func UseResetTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseResetToken, vs...))
}

// UseResetTokenNotIn applies the NotIn predicate on the "use_reset_token" field.
func UseResetTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseResetToken, vs...))
}

// UseResetTokenGT applies the GT predicate on the "use_reset_token" field.
func UseResetTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseResetToken, v))
}

// UseResetTokenGTE applies the GTE predicate on the "use_reset_token" field.
func UseResetTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseResetToken, v))
}

// UseResetTokenLT applies the LT predicate on the "use_reset_token" field.
func UseResetTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseResetToken, v))
}

// UseResetTokenLTE applies the LTE predicate on the "use_reset_token" field.
func UseResetTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseResetToken, v))
}

// UseResetTokenContains applies the Contains predicate on the "use_reset_token" field.
func UseResetTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUseResetToken, v))
}

// UseResetTokenHasPrefix applies the HasPrefix predicate on the "use_reset_token" field.
func UseResetTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUseResetToken, v))
}

// UseResetTokenHasSuffix applies the HasSuffix predicate on the "use_reset_token" field.
func UseResetTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUseResetToken, v))
}

// UseResetTokenIsNil applies the IsNil predicate on the "use_reset_token" field.
func UseResetTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUseResetToken))
}

// UseResetTokenNotNil applies the NotNil predicate on the "use_reset_token" field.
func UseResetTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUseResetToken))
}

// UseResetTokenEqualFold applies the EqualFold predicate on the "use_reset_token" field.
func UseResetTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUseResetToken, v))
}

// UseResetTokenContainsFold applies the ContainsFold predicate on the "use_reset_token" field.
func UseResetTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUseResetToken, v))
}

// UseResetTokenExpiryEQ applies the EQ predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseResetTokenExpiry, v))
}

// UseResetTokenExpiryNEQ applies the NEQ predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseResetTokenExpiry, v))
}

// UseResetTokenExpiryIn applies the In predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseResetTokenExpiry, vs...))
}

// UseResetTokenExpiryNotIn applies the NotIn predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseResetTokenExpiry, vs...))
}

// UseResetTokenExpiryGT applies the GT predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseResetTokenExpiry, v))
}

// UseResetTokenExpiryGTE applies the GTE predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseResetTokenExpiry, v))
}

// UseResetTokenExpiryLT applies the LT predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseResetTokenExpiry, v))
}

// UseResetTokenExpiryLTE applies the LTE predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseResetTokenExpiry, v))
}

// UseResetTokenExpiryIsNil applies the IsNil predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUseResetTokenExpiry))
}

// UseResetTokenExpiryNotNil applies the NotNil predicate on the "use_reset_token_expiry" field.
func UseResetTokenExpiryNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUseResetTokenExpiry))
}

// UseAccessTokenEQ applies the EQ predicate on the "use_access_token" field.
func UseAccessTokenEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseAccessToken, v))
}

// UseAccessTokenNEQ applies the NEQ predicate on the "use_access_token" field.
func UseAccessTokenNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseAccessToken, v))
}

// UseAccessTokenIn applies the In predicate on the "use_access_token" field.
func UseAccessTokenIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseAccessToken, vs...))
}

// UseAccessTokenNotIn applies the NotIn predicate on the "use_access_token" field.
func UseAccessTokenNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseAccessToken, vs...))
}

// UseAccessTokenGT applies the GT predicate on the "use_access_token" field.
func UseAccessTokenGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseAccessToken, v))
}

// UseAccessTokenGTE applies the GTE predicate on the "use_access_token" field.
func UseAccessTokenGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseAccessToken, v))
}

// UseAccessTokenLT applies the LT predicate on the "use_access_token" field.
func UseAccessTokenLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseAccessToken, v))
}

// UseAccessTokenLTE applies the LTE predicate on the "use_access_token" field.
func UseAccessTokenLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseAccessToken, v))
}

// UseAccessTokenContains applies the Contains predicate on the "use_access_token" field.
func UseAccessTokenContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUseAccessToken, v))
}

// UseAccessTokenHasPrefix applies the HasPrefix predicate on the "use_access_token" field.
func UseAccessTokenHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUseAccessToken, v))
}

// UseAccessTokenHasSuffix applies the HasSuffix predicate on the "use_access_token" field.
func UseAccessTokenHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUseAccessToken, v))
}

// UseAccessTokenIsNil applies the IsNil predicate on the "use_access_token" field.
func UseAccessTokenIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUseAccessToken))
}

// UseAccessTokenNotNil applies the NotNil predicate on the "use_access_token" field.
func UseAccessTokenNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUseAccessToken))
}

// UseAccessTokenEqualFold applies the EqualFold predicate on the "use_access_token" field.
func UseAccessTokenEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUseAccessToken, v))
}

// UseAccessTokenContainsFold applies the ContainsFold predicate on the "use_access_token" field.
func UseAccessTokenContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUseAccessToken, v))
}

// UseAccessTokenExpiryEQ applies the EQ predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseAccessTokenExpiry, v))
}

// UseAccessTokenExpiryNEQ applies the NEQ predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseAccessTokenExpiry, v))
}

// UseAccessTokenExpiryIn applies the In predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseAccessTokenExpiry, vs...))
}

// UseAccessTokenExpiryNotIn applies the NotIn predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseAccessTokenExpiry, vs...))
}

// UseAccessTokenExpiryGT applies the GT predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseAccessTokenExpiry, v))
}

// UseAccessTokenExpiryGTE applies the GTE predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseAccessTokenExpiry, v))
}

// UseAccessTokenExpiryLT applies the LT predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseAccessTokenExpiry, v))
}

// UseAccessTokenExpiryLTE applies the LTE predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseAccessTokenExpiry, v))
}

// UseAccessTokenExpiryIsNil applies the IsNil predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUseAccessTokenExpiry))
}

// UseAccessTokenExpiryNotNil applies the NotNil predicate on the "use_access_token_expiry" field.
func UseAccessTokenExpiryNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUseAccessTokenExpiry))
}

// UseCreatedAtEQ applies the EQ predicate on the "use_created_at" field.
func UseCreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseCreatedAt, v))
}

// UseCreatedAtNEQ applies the NEQ predicate on the "use_created_at" field.
func UseCreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseCreatedAt, v))
}

// UseCreatedAtIn applies the In predicate on the "use_created_at" field.
func UseCreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseCreatedAt, vs...))
}

// UseCreatedAtNotIn applies the NotIn predicate on the "use_created_at" field.
func UseCreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseCreatedAt, vs...))
}

// UseCreatedAtGT applies the GT predicate on the "use_created_at" field.
func UseCreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseCreatedAt, v))
}

// UseCreatedAtGTE applies the GTE predicate on the "use_created_at" field.
func UseCreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseCreatedAt, v))
}

// UseCreatedAtLT applies the LT predicate on the "use_created_at" field.
func UseCreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseCreatedAt, v))
}

// UseCreatedAtLTE applies the LTE predicate on the "use_created_at" field.
func UseCreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseCreatedAt, v))
}

// UseCreatedAtIsNil applies the IsNil predicate on the "use_created_at" field.
func UseCreatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUseCreatedAt))
}

// UseCreatedAtNotNil applies the NotNil predicate on the "use_created_at" field.
func UseCreatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUseCreatedAt))
}

// UseUpdatedAtEQ applies the EQ predicate on the "use_updated_at" field.
func UseUpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseUpdatedAt, v))
}

// UseUpdatedAtNEQ applies the NEQ predicate on the "use_updated_at" field.
func UseUpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseUpdatedAt, v))
}

// UseUpdatedAtIn applies the In predicate on the "use_updated_at" field.
func UseUpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseUpdatedAt, vs...))
}

// UseUpdatedAtNotIn applies the NotIn predicate on the "use_updated_at" field.
func UseUpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseUpdatedAt, vs...))
}

// UseUpdatedAtGT applies the GT predicate on the "use_updated_at" field.
func UseUpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseUpdatedAt, v))
}

// UseUpdatedAtGTE applies the GTE predicate on the "use_updated_at" field.
func UseUpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseUpdatedAt, v))
}

// UseUpdatedAtLT applies the LT predicate on the "use_updated_at" field.
func UseUpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseUpdatedAt, v))
}

// UseUpdatedAtLTE applies the LTE predicate on the "use_updated_at" field.
func UseUpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseUpdatedAt, v))
}

// UseUpdatedAtIsNil applies the IsNil predicate on the "use_updated_at" field.
func UseUpdatedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUseUpdatedAt))
}

// UseUpdatedAtNotNil applies the NotNil predicate on the "use_updated_at" field.
func UseUpdatedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUseUpdatedAt))
}

// UseDeletedAtEQ applies the EQ predicate on the "use_deleted_at" field.
func UseDeletedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUseDeletedAt, v))
}

// UseDeletedAtNEQ applies the NEQ predicate on the "use_deleted_at" field.
func UseDeletedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUseDeletedAt, v))
}

// UseDeletedAtIn applies the In predicate on the "use_deleted_at" field.
func UseDeletedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUseDeletedAt, vs...))
}

// UseDeletedAtNotIn applies the NotIn predicate on the "use_deleted_at" field.
func UseDeletedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUseDeletedAt, vs...))
}

// UseDeletedAtGT applies the GT predicate on the "use_deleted_at" field.
func UseDeletedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUseDeletedAt, v))
}

// UseDeletedAtGTE applies the GTE predicate on the "use_deleted_at" field.
func UseDeletedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUseDeletedAt, v))
}

// UseDeletedAtLT applies the LT predicate on the "use_deleted_at" field.
func UseDeletedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUseDeletedAt, v))
}

// UseDeletedAtLTE applies the LTE predicate on the "use_deleted_at" field.
func UseDeletedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUseDeletedAt, v))
}

// UseDeletedAtIsNil applies the IsNil predicate on the "use_deleted_at" field.
func UseDeletedAtIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldUseDeletedAt))
}

// UseDeletedAtNotNil applies the NotNil predicate on the "use_deleted_at" field.
func UseDeletedAtNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldUseDeletedAt))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(sql.NotPredicates(p))
}
