// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUseID holds the string denoting the use_id field in the database.
	FieldUseID = "use_id"
	// FieldUseType holds the string denoting the use_type field in the database.
	FieldUseType = "use_type"
	// FieldUseUsername holds the string denoting the use_username field in the database.
	FieldUseUsername = "use_username"
	// FieldUsePwd holds the string denoting the use_pwd field in the database.
	FieldUsePwd = "use_pwd"
	// FieldUseEmail holds the string denoting the use_email field in the database.
	FieldUseEmail = "use_email"
	// FieldUseResetToken holds the string denoting the use_reset_token field in the database.
	FieldUseResetToken = "use_reset_token"
	// FieldUseResetTokenExpiry holds the string denoting the use_reset_token_expiry field in the database.
	FieldUseResetTokenExpiry = "use_reset_token_expiry"
	// FieldUseAccessToken holds the string denoting the use_access_token field in the database.
	FieldUseAccessToken = "use_access_token"
	// FieldUseAccessTokenExpiry holds the string denoting the use_access_token_expiry field in the database.
	FieldUseAccessTokenExpiry = "use_access_token_expiry"
	// FieldUseCreatedAt holds the string denoting the use_created_at field in the database.
	FieldUseCreatedAt = "use_created_at"
	// FieldUseUpdatedAt holds the string denoting the use_updated_at field in the database.
	FieldUseUpdatedAt = "use_updated_at"
	// FieldUseDeletedAt holds the string denoting the use_deleted_at field in the database.
	FieldUseDeletedAt = "use_deleted_at"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUseID,
	FieldUseType,
	FieldUseUsername,
	FieldUsePwd,
	FieldUseEmail,
	FieldUseResetToken,
	FieldUseResetTokenExpiry,
	FieldUseAccessToken,
	FieldUseAccessTokenExpiry,
	FieldUseCreatedAt,
	FieldUseUpdatedAt,
	FieldUseDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUseType holds the default value on creation for the "use_type" field.
	DefaultUseType int64
	// UseUsernameValidator is a validator for the "use_username" field. It is called by the builders before save.
	UseUsernameValidator func(string) error
	// UsePwdValidator is a validator for the "use_pwd" field. It is called by the builders before save.
	UsePwdValidator func(string) error
	// UseEmailValidator is a validator for the "use_email" field. It is called by the builders before save.
	UseEmailValidator func(string) error
	// UseResetTokenValidator is a validator for the "use_reset_token" field. It is called by the builders before save.
	UseResetTokenValidator func(string) error
	// UseAccessTokenValidator is a validator for the "use_access_token" field. It is called by the builders before save.
	UseAccessTokenValidator func(string) error
	// DefaultUseCreatedAt holds the default value on creation for the "use_created_at" field.
	DefaultUseCreatedAt func() time.Time
	// DefaultUseUpdatedAt holds the default value on creation for the "use_updated_at" field.
	DefaultUseUpdatedAt func() time.Time
	// UpdateDefaultUseUpdatedAt holds the default value on update for the "use_updated_at" field.
	UpdateDefaultUseUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUseID orders the results by the use_id field.
func ByUseID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseID, opts...).ToFunc()
}

// ByUseType orders the results by the use_type field.
func ByUseType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseType, opts...).ToFunc()
}

// ByUseUsername orders the results by the use_username field.
func ByUseUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseUsername, opts...).ToFunc()
}

// ByUsePwd orders the results by the use_pwd field.
func ByUsePwd(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsePwd, opts...).ToFunc()
}

// ByUseEmail orders the results by the use_email field.
func ByUseEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseEmail, opts...).ToFunc()
}

// ByUseResetToken orders the results by the use_reset_token field.
func ByUseResetToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseResetToken, opts...).ToFunc()
}

// ByUseResetTokenExpiry orders the results by the use_reset_token_expiry field.
func ByUseResetTokenExpiry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseResetTokenExpiry, opts...).ToFunc()
}

// ByUseAccessToken orders the results by the use_access_token field.
func ByUseAccessToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseAccessToken, opts...).ToFunc()
}

// ByUseAccessTokenExpiry orders the results by the use_access_token_expiry field.
func ByUseAccessTokenExpiry(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseAccessTokenExpiry, opts...).ToFunc()
}

// ByUseCreatedAt orders the results by the use_created_at field.
func ByUseCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseCreatedAt, opts...).ToFunc()
}

// ByUseUpdatedAt orders the results by the use_updated_at field.
func ByUseUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseUpdatedAt, opts...).ToFunc()
}

// ByUseDeletedAt orders the results by the use_deleted_at field.
func ByUseDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUseDeletedAt, opts...).ToFunc()
}
