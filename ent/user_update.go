// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/javiclavero/go-auth-service/ent/predicate"
	"github.com/javiclavero/go-auth-service/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUseID sets the "use_id" field.
func (uu *UserUpdate) SetUseID(u uint64) *UserUpdate {
	uu.mutation.ResetUseID()
	uu.mutation.SetUseID(u)
	return uu
}

// SetNillableUseID sets the "use_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseID(u *uint64) *UserUpdate {
	if u != nil {
		uu.SetUseID(*u)
	}
	return uu
}

// AddUseID adds u to the "use_id" field.
func (uu *UserUpdate) AddUseID(u int64) *UserUpdate {
	uu.mutation.AddUseID(u)
	return uu
}

// SetUseType sets the "use_type" field.
func (uu *UserUpdate) SetUseType(i int64) *UserUpdate {
	uu.mutation.ResetUseType()
	uu.mutation.SetUseType(i)
	return uu
}

// SetNillableUseType sets the "use_type" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseType(i *int64) *UserUpdate {
	if i != nil {
		uu.SetUseType(*i)
	}
	return uu
}

// AddUseType adds i to the "use_type" field.
func (uu *UserUpdate) AddUseType(i int64) *UserUpdate {
	uu.mutation.AddUseType(i)
	return uu
}

// SetUseUsername sets the "use_username" field.
func (uu *UserUpdate) SetUseUsername(s string) *UserUpdate {
	uu.mutation.SetUseUsername(s)
	return uu
}

// SetNillableUseUsername sets the "use_username" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseUsername(s *string) *UserUpdate {
	if s != nil {
		uu.SetUseUsername(*s)
	}
	return uu
}

// SetUsePwd sets the "use_pwd" field.
func (uu *UserUpdate) SetUsePwd(s string) *UserUpdate {
	uu.mutation.SetUsePwd(s)
	return uu
}

// SetNillableUsePwd sets the "use_pwd" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUsePwd(s *string) *UserUpdate {
	if s != nil {
		uu.SetUsePwd(*s)
	}
	return uu
}

// SetUseEmail sets the "use_email" field.
func (uu *UserUpdate) SetUseEmail(s string) *UserUpdate {
	uu.mutation.SetUseEmail(s)
	return uu
}

// SetNillableUseEmail sets the "use_email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetUseEmail(*s)
	}
	return uu
}

// SetUseResetToken sets the "use_reset_token" field.
func (uu *UserUpdate) SetUseResetToken(s string) *UserUpdate {
	uu.mutation.SetUseResetToken(s)
	return uu
}

// SetNillableUseResetToken sets the "use_reset_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseResetToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetUseResetToken(*s)
	}
	return uu
}

// ClearUseResetToken clears the value of the "use_reset_token" field.
func (uu *UserUpdate) ClearUseResetToken() *UserUpdate {
	uu.mutation.ClearUseResetToken()
	return uu
}

// SetUseResetTokenExpiry sets the "use_reset_token_expiry" field.
func (uu *UserUpdate) SetUseResetTokenExpiry(t time.Time) *UserUpdate {
	uu.mutation.SetUseResetTokenExpiry(t)
	return uu
}

// SetNillableUseResetTokenExpiry sets the "use_reset_token_expiry" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseResetTokenExpiry(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUseResetTokenExpiry(*t)
	}
	return uu
}

// ClearUseResetTokenExpiry clears the value of the "use_reset_token_expiry" field.
func (uu *UserUpdate) ClearUseResetTokenExpiry() *UserUpdate {
	uu.mutation.ClearUseResetTokenExpiry()
	return uu
}

// SetUseAccessToken sets the "use_access_token" field.
func (uu *UserUpdate) SetUseAccessToken(s string) *UserUpdate {
	uu.mutation.SetUseAccessToken(s)
	return uu
}

// SetNillableUseAccessToken sets the "use_access_token" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseAccessToken(s *string) *UserUpdate {
	if s != nil {
		uu.SetUseAccessToken(*s)
	}
	return uu
}

// ClearUseAccessToken clears the value of the "use_access_token" field.
func (uu *UserUpdate) ClearUseAccessToken() *UserUpdate {
	uu.mutation.ClearUseAccessToken()
	return uu
}

// SetUseAccessTokenExpiry sets the "use_access_token_expiry" field.
func (uu *UserUpdate) SetUseAccessTokenExpiry(t time.Time) *UserUpdate {
	uu.mutation.SetUseAccessTokenExpiry(t)
	return uu
}

// SetNillableUseAccessTokenExpiry sets the "use_access_token_expiry" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseAccessTokenExpiry(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUseAccessTokenExpiry(*t)
	}
	return uu
}

// ClearUseAccessTokenExpiry clears the value of the "use_access_token_expiry" field.
func (uu *UserUpdate) ClearUseAccessTokenExpiry() *UserUpdate {
	uu.mutation.ClearUseAccessTokenExpiry()
	return uu
}

// SetUseCreatedAt sets the "use_created_at" field.
func (uu *UserUpdate) SetUseCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUseCreatedAt(t)
	return uu
}

// SetNillableUseCreatedAt sets the "use_created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUseCreatedAt(*t)
	}
	return uu
}

// ClearUseCreatedAt clears the value of the "use_created_at" field.
func (uu *UserUpdate) ClearUseCreatedAt() *UserUpdate {
	uu.mutation.ClearUseCreatedAt()
	return uu
}

// SetUseUpdatedAt sets the "use_updated_at" field.
func (uu *UserUpdate) SetUseUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUseUpdatedAt(t)
	return uu
}

// ClearUseUpdatedAt clears the value of the "use_updated_at" field.
func (uu *UserUpdate) ClearUseUpdatedAt() *UserUpdate {
	uu.mutation.ClearUseUpdatedAt()
	return uu
}

// SetUseDeletedAt sets the "use_deleted_at" field.
func (uu *UserUpdate) SetUseDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUseDeletedAt(t)
	return uu
}

// SetNillableUseDeletedAt sets the "use_deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUseDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetUseDeletedAt(*t)
	}
	return uu
}

// ClearUseDeletedAt clears the value of the "use_deleted_at" field.
func (uu *UserUpdate) ClearUseDeletedAt() *UserUpdate {
	uu.mutation.ClearUseDeletedAt()
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UseUpdatedAt(); !ok && !uu.mutation.UseUpdatedAtCleared() {
		v := user.UpdateDefaultUseUpdatedAt()
		uu.mutation.SetUseUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.UseUsername(); ok {
		if err := user.UseUsernameValidator(v); err != nil {
			return &ValidationError{Name: "use_username", err: fmt.Errorf(`ent: validator failed for field "User.use_username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.UsePwd(); ok {
		if err := user.UsePwdValidator(v); err != nil {
			return &ValidationError{Name: "use_pwd", err: fmt.Errorf(`ent: validator failed for field "User.use_pwd": %w`, err)}
		}
	}
	if v, ok := uu.mutation.UseEmail(); ok {
		if err := user.UseEmailValidator(v); err != nil {
			return &ValidationError{Name: "use_email", err: fmt.Errorf(`ent: validator failed for field "User.use_email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.UseResetToken(); ok {
		if err := user.UseResetTokenValidator(v); err != nil {
			return &ValidationError{Name: "use_reset_token", err: fmt.Errorf(`ent: validator failed for field "User.use_reset_token": %w`, err)}
		}
	}
	if v, ok := uu.mutation.UseAccessToken(); ok {
		if err := user.UseAccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "use_access_token", err: fmt.Errorf(`ent: validator failed for field "User.use_access_token": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.UseID(); ok {
		_spec.SetField(user.FieldUseID, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.AddedUseID(); ok {
		_spec.AddField(user.FieldUseID, field.TypeUint64, value)
	}
	if value, ok := uu.mutation.UseType(); ok {
		_spec.SetField(user.FieldUseType, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.AddedUseType(); ok {
		_spec.AddField(user.FieldUseType, field.TypeInt64, value)
	}
	if value, ok := uu.mutation.UseUsername(); ok {
		_spec.SetField(user.FieldUseUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.UsePwd(); ok {
		_spec.SetField(user.FieldUsePwd, field.TypeString, value)
	}
	if value, ok := uu.mutation.UseEmail(); ok {
		_spec.SetField(user.FieldUseEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.UseResetToken(); ok {
		_spec.SetField(user.FieldUseResetToken, field.TypeString, value)
	}
	if uu.mutation.UseResetTokenCleared() {
		_spec.ClearField(user.FieldUseResetToken, field.TypeString)
	}
	if value, ok := uu.mutation.UseResetTokenExpiry(); ok {
		_spec.SetField(user.FieldUseResetTokenExpiry, field.TypeTime, value)
	}
	if uu.mutation.UseResetTokenExpiryCleared() {
		_spec.ClearField(user.FieldUseResetTokenExpiry, field.TypeTime)
	}
	if value, ok := uu.mutation.UseAccessToken(); ok {
		_spec.SetField(user.FieldUseAccessToken, field.TypeString, value)
	}
	if uu.mutation.UseAccessTokenCleared() {
		_spec.ClearField(user.FieldUseAccessToken, field.TypeString)
	}
	if value, ok := uu.mutation.UseAccessTokenExpiry(); ok {
		_spec.SetField(user.FieldUseAccessTokenExpiry, field.TypeTime, value)
	}
	if uu.mutation.UseAccessTokenExpiryCleared() {
		_spec.ClearField(user.FieldUseAccessTokenExpiry, field.TypeTime)
	}
	if value, ok := uu.mutation.UseCreatedAt(); ok {
		_spec.SetField(user.FieldUseCreatedAt, field.TypeTime, value)
	}
	if uu.mutation.UseCreatedAtCleared() {
		_spec.ClearField(user.FieldUseCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UseUpdatedAt(); ok {
		_spec.SetField(user.FieldUseUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UseUpdatedAtCleared() {
		_spec.ClearField(user.FieldUseUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UseDeletedAt(); ok {
		_spec.SetField(user.FieldUseDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.UseDeletedAtCleared() {
		_spec.ClearField(user.FieldUseDeletedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUseID sets the "use_id" field.
func (uuo *UserUpdateOne) SetUseID(u uint64) *UserUpdateOne {
	uuo.mutation.ResetUseID()
	uuo.mutation.SetUseID(u)
	return uuo
}

// SetNillableUseID sets the "use_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseID(u *uint64) *UserUpdateOne {
	if u != nil {
		uuo.SetUseID(*u)
	}
	return uuo
}

// AddUseID adds u to the "use_id" field.
func (uuo *UserUpdateOne) AddUseID(u int64) *UserUpdateOne {
	uuo.mutation.AddUseID(u)
	return uuo
}

// SetUseType sets the "use_type" field.
func (uuo *UserUpdateOne) SetUseType(i int64) *UserUpdateOne {
	uuo.mutation.ResetUseType()
	uuo.mutation.SetUseType(i)
	return uuo
}

// SetNillableUseType sets the "use_type" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseType(i *int64) *UserUpdateOne {
	if i != nil {
		uuo.SetUseType(*i)
	}
	return uuo
}

// AddUseType adds i to the "use_type" field.
func (uuo *UserUpdateOne) AddUseType(i int64) *UserUpdateOne {
	uuo.mutation.AddUseType(i)
	return uuo
}

// SetUseUsername sets the "use_username" field.
func (uuo *UserUpdateOne) SetUseUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUseUsername(s)
	return uuo
}

// SetNillableUseUsername sets the "use_username" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseUsername(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUseUsername(*s)
	}
	return uuo
}

// SetUsePwd sets the "use_pwd" field.
func (uuo *UserUpdateOne) SetUsePwd(s string) *UserUpdateOne {
	uuo.mutation.SetUsePwd(s)
	return uuo
}

// SetNillableUsePwd sets the "use_pwd" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUsePwd(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUsePwd(*s)
	}
	return uuo
}

// SetUseEmail sets the "use_email" field.
func (uuo *UserUpdateOne) SetUseEmail(s string) *UserUpdateOne {
	uuo.mutation.SetUseEmail(s)
	return uuo
}

// SetNillableUseEmail sets the "use_email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUseEmail(*s)
	}
	return uuo
}

// SetUseResetToken sets the "use_reset_token" field.
func (uuo *UserUpdateOne) SetUseResetToken(s string) *UserUpdateOne {
	uuo.mutation.SetUseResetToken(s)
	return uuo
}

// SetNillableUseResetToken sets the "use_reset_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseResetToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUseResetToken(*s)
	}
	return uuo
}

// ClearUseResetToken clears the value of the "use_reset_token" field.
func (uuo *UserUpdateOne) ClearUseResetToken() *UserUpdateOne {
	uuo.mutation.ClearUseResetToken()
	return uuo
}

// SetUseResetTokenExpiry sets the "use_reset_token_expiry" field.
func (uuo *UserUpdateOne) SetUseResetTokenExpiry(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUseResetTokenExpiry(t)
	return uuo
}

// SetNillableUseResetTokenExpiry sets the "use_reset_token_expiry" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseResetTokenExpiry(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUseResetTokenExpiry(*t)
	}
	return uuo
}

// ClearUseResetTokenExpiry clears the value of the "use_reset_token_expiry" field.
func (uuo *UserUpdateOne) ClearUseResetTokenExpiry() *UserUpdateOne {
	uuo.mutation.ClearUseResetTokenExpiry()
	return uuo
}

// SetUseAccessToken sets the "use_access_token" field.
func (uuo *UserUpdateOne) SetUseAccessToken(s string) *UserUpdateOne {
	uuo.mutation.SetUseAccessToken(s)
	return uuo
}

// SetNillableUseAccessToken sets the "use_access_token" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseAccessToken(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUseAccessToken(*s)
	}
	return uuo
}

// ClearUseAccessToken clears the value of the "use_access_token" field.
func (uuo *UserUpdateOne) ClearUseAccessToken() *UserUpdateOne {
	uuo.mutation.ClearUseAccessToken()
	return uuo
}

// SetUseAccessTokenExpiry sets the "use_access_token_expiry" field.
func (uuo *UserUpdateOne) SetUseAccessTokenExpiry(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUseAccessTokenExpiry(t)
	return uuo
}

// SetNillableUseAccessTokenExpiry sets the "use_access_token_expiry" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseAccessTokenExpiry(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUseAccessTokenExpiry(*t)
	}
	return uuo
}

// ClearUseAccessTokenExpiry clears the value of the "use_access_token_expiry" field.
func (uuo *UserUpdateOne) ClearUseAccessTokenExpiry() *UserUpdateOne {
	uuo.mutation.ClearUseAccessTokenExpiry()
	return uuo
}

// SetUseCreatedAt sets the "use_created_at" field.
func (uuo *UserUpdateOne) SetUseCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUseCreatedAt(t)
	return uuo
}

// SetNillableUseCreatedAt sets the "use_created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUseCreatedAt(*t)
	}
	return uuo
}

// ClearUseCreatedAt clears the value of the "use_created_at" field.
func (uuo *UserUpdateOne) ClearUseCreatedAt() *UserUpdateOne {
	uuo.mutation.ClearUseCreatedAt()
	return uuo
}

// SetUseUpdatedAt sets the "use_updated_at" field.
func (uuo *UserUpdateOne) SetUseUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUseUpdatedAt(t)
	return uuo
}

// ClearUseUpdatedAt clears the value of the "use_updated_at" field.
func (uuo *UserUpdateOne) ClearUseUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUseUpdatedAt()
	return uuo
}

// SetUseDeletedAt sets the "use_deleted_at" field.
func (uuo *UserUpdateOne) SetUseDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUseDeletedAt(t)
	return uuo
}

// SetNillableUseDeletedAt sets the "use_deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUseDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetUseDeletedAt(*t)
	}
	return uuo
}

// ClearUseDeletedAt clears the value of the "use_deleted_at" field.
func (uuo *UserUpdateOne) ClearUseDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearUseDeletedAt()
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UseUpdatedAt(); !ok && !uuo.mutation.UseUpdatedAtCleared() {
		v := user.UpdateDefaultUseUpdatedAt()
		uuo.mutation.SetUseUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.UseUsername(); ok {
		if err := user.UseUsernameValidator(v); err != nil {
			return &ValidationError{Name: "use_username", err: fmt.Errorf(`ent: validator failed for field "User.use_username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.UsePwd(); ok {
		if err := user.UsePwdValidator(v); err != nil {
			return &ValidationError{Name: "use_pwd", err: fmt.Errorf(`ent: validator failed for field "User.use_pwd": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.UseEmail(); ok {
		if err := user.UseEmailValidator(v); err != nil {
			return &ValidationError{Name: "use_email", err: fmt.Errorf(`ent: validator failed for field "User.use_email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.UseResetToken(); ok {
		if err := user.UseResetTokenValidator(v); err != nil {
			return &ValidationError{Name: "use_reset_token", err: fmt.Errorf(`ent: validator failed for field "User.use_reset_token": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.UseAccessToken(); ok {
		if err := user.UseAccessTokenValidator(v); err != nil {
			return &ValidationError{Name: "use_access_token", err: fmt.Errorf(`ent: validator failed for field "User.use_access_token": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.UseID(); ok {
		_spec.SetField(user.FieldUseID, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.AddedUseID(); ok {
		_spec.AddField(user.FieldUseID, field.TypeUint64, value)
	}
	if value, ok := uuo.mutation.UseType(); ok {
		_spec.SetField(user.FieldUseType, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.AddedUseType(); ok {
		_spec.AddField(user.FieldUseType, field.TypeInt64, value)
	}
	if value, ok := uuo.mutation.UseUsername(); ok {
		_spec.SetField(user.FieldUseUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.UsePwd(); ok {
		_spec.SetField(user.FieldUsePwd, field.TypeString, value)
	}
	if value, ok := uuo.mutation.UseEmail(); ok {
		_spec.SetField(user.FieldUseEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.UseResetToken(); ok {
		_spec.SetField(user.FieldUseResetToken, field.TypeString, value)
	}
	if uuo.mutation.UseResetTokenCleared() {
		_spec.ClearField(user.FieldUseResetToken, field.TypeString)
	}
	if value, ok := uuo.mutation.UseResetTokenExpiry(); ok {
		_spec.SetField(user.FieldUseResetTokenExpiry, field.TypeTime, value)
	}
	if uuo.mutation.UseResetTokenExpiryCleared() {
		_spec.ClearField(user.FieldUseResetTokenExpiry, field.TypeTime)
	}
	if value, ok := uuo.mutation.UseAccessToken(); ok {
		_spec.SetField(user.FieldUseAccessToken, field.TypeString, value)
	}
	if uuo.mutation.UseAccessTokenCleared() {
		_spec.ClearField(user.FieldUseAccessToken, field.TypeString)
	}
	if value, ok := uuo.mutation.UseAccessTokenExpiry(); ok {
		_spec.SetField(user.FieldUseAccessTokenExpiry, field.TypeTime, value)
	}
	if uuo.mutation.UseAccessTokenExpiryCleared() {
		_spec.ClearField(user.FieldUseAccessTokenExpiry, field.TypeTime)
	}
	if value, ok := uuo.mutation.UseCreatedAt(); ok {
		_spec.SetField(user.FieldUseCreatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UseCreatedAtCleared() {
		_spec.ClearField(user.FieldUseCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UseUpdatedAt(); ok {
		_spec.SetField(user.FieldUseUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UseUpdatedAtCleared() {
		_spec.ClearField(user.FieldUseUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UseDeletedAt(); ok {
		_spec.SetField(user.FieldUseDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.UseDeletedAtCleared() {
		_spec.ClearField(user.FieldUseDeletedAt, field.TypeTime)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
