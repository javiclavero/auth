// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/javiclavero/go-auth-service/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UseID holds the value of the "use_id" field.
	UseID uint64 `json:"use_id"`
	// UseType holds the value of the "use_type" field.
	UseType int64 `json:"use_type,omitempty"`
	// UseUsername holds the value of the "use_username" field.
	UseUsername string `json:"username"`
	// UsePwd holds the value of the "use_pwd" field.
	UsePwd string `json:"-"`
	// UseEmail holds the value of the "use_email" field.
	UseEmail string `json:"email"`
	// UseResetToken holds the value of the "use_reset_token" field.
	UseResetToken *string `json:"use_reset_token,omitempty"`
	// UseResetTokenExpiry holds the value of the "use_reset_token_expiry" field.
	UseResetTokenExpiry *time.Time `json:"use_reset_token_expiry,omitempty"`
	// UseAccessToken holds the value of the "use_access_token" field.
	UseAccessToken *string `json:"use_access_token,omitempty"`
	// UseAccessTokenExpiry holds the value of the "use_access_token_expiry" field.
	UseAccessTokenExpiry *time.Time `json:"use_access_token_expiry,omitempty"`
	// UseCreatedAt holds the value of the "use_created_at" field.
	UseCreatedAt *time.Time `json:"use_created_at,omitempty"`
	// UseUpdatedAt holds the value of the "use_updated_at" field.
	UseUpdatedAt *time.Time `json:"use_updated_at,omitempty"`
	// UseDeletedAt holds the value of the "use_deleted_at" field.
	UseDeletedAt *time.Time `json:"use_deleted_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldUseID, user.FieldUseType:
			values[i] = new(sql.NullInt64)
		case user.FieldUseUsername, user.FieldUsePwd, user.FieldUseEmail, user.FieldUseResetToken, user.FieldUseAccessToken:
			values[i] = new(sql.NullString)
		case user.FieldUseResetTokenExpiry, user.FieldUseAccessTokenExpiry, user.FieldUseCreatedAt, user.FieldUseUpdatedAt, user.FieldUseDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldUseID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_id", values[i])
			} else if value.Valid {
				u.UseID = uint64(value.Int64)
			}
		case user.FieldUseType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field use_type", values[i])
			} else if value.Valid {
				u.UseType = value.Int64
			}
		case user.FieldUseUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_username", values[i])
			} else if value.Valid {
				u.UseUsername = value.String
			}
		case user.FieldUsePwd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_pwd", values[i])
			} else if value.Valid {
				u.UsePwd = value.String
			}
		case user.FieldUseEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_email", values[i])
			} else if value.Valid {
				u.UseEmail = value.String
			}
		case user.FieldUseResetToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_reset_token", values[i])
			} else if value.Valid {
				u.UseResetToken = new(string)
				*u.UseResetToken = value.String
			}
		case user.FieldUseResetTokenExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_reset_token_expiry", values[i])
			} else if value.Valid {
				u.UseResetTokenExpiry = new(time.Time)
				*u.UseResetTokenExpiry = value.Time
			}
		case user.FieldUseAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field use_access_token", values[i])
			} else if value.Valid {
				u.UseAccessToken = new(string)
				*u.UseAccessToken = value.String
			}
		case user.FieldUseAccessTokenExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_access_token_expiry", values[i])
			} else if value.Valid {
				u.UseAccessTokenExpiry = new(time.Time)
				*u.UseAccessTokenExpiry = value.Time
			}
		case user.FieldUseCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_created_at", values[i])
			} else if value.Valid {
				u.UseCreatedAt = new(time.Time)
				*u.UseCreatedAt = value.Time
			}
		case user.FieldUseUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_updated_at", values[i])
			} else if value.Valid {
				u.UseUpdatedAt = new(time.Time)
				*u.UseUpdatedAt = value.Time
			}
		case user.FieldUseDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field use_deleted_at", values[i])
			} else if value.Valid {
				u.UseDeletedAt = new(time.Time)
				*u.UseDeletedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("use_id=")
	builder.WriteString(fmt.Sprintf("%v", u.UseID))
	builder.WriteString(", ")
	builder.WriteString("use_type=")
	builder.WriteString(fmt.Sprintf("%v", u.UseType))
	builder.WriteString(", ")
	builder.WriteString("use_username=")
	builder.WriteString(u.UseUsername)
	builder.WriteString(", ")
	builder.WriteString("use_pwd=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("use_email=")
	builder.WriteString(u.UseEmail)
	builder.WriteString(", ")
	if v := u.UseResetToken; v != nil {
		builder.WriteString("use_reset_token=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.UseResetTokenExpiry; v != nil {
		builder.WriteString("use_reset_token_expiry=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UseAccessToken; v != nil {
		builder.WriteString("use_access_token=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.UseAccessTokenExpiry; v != nil {
		builder.WriteString("use_access_token_expiry=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UseCreatedAt; v != nil {
		builder.WriteString("use_created_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UseUpdatedAt; v != nil {
		builder.WriteString("use_updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.UseDeletedAt; v != nil {
		builder.WriteString("use_deleted_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
